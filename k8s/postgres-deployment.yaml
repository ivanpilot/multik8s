# given that the postgres db lives inside a pod, to avoid losing all our data in case the pod gets deleted or crashes, we MUST attached a persistent volume claim to this pod so that the filesystem onto which the data are stored is located outside the pod.
apiVersion: apps/v1
kind: Deployment
metadata:
    name: postgres-deployment
spec:
    replicas: 1
    selector:
        matchLabels:
            component: postgres
    template:
        metadata:
            labels:
                component: postgres
        spec:
            #below we attach our persistent volume claim to this pod
            # this volumes section only allocate the volume. we then need to tell our containers to use this storage
            volumes:
                - name: postgres-storage
                  persistentVolumeClaim:
                    claimName: database-persistent-volume-claim
                    # the line above is what makes kubernetes go and read the object whose name is database-persistent-volume-claim and execute this file
            containers:
                - name: postgres
                  image: postgres
                  ports:
                    - containerPort: 5432
                  volumeMounts:
                  #Now that we have access to the storage, this says how we want it to be used inside our container
                    - name: postgres-storage #the name here MUST match the name of the volumes!!!
                      mountPath: /var/lib/postgresql/data #this must be the directory that postgres uses to store data because ultimately this is what we want to back up
                      subPath: postgres # this indicate that all the data inside the volume will be saved in a folder called postgres. This spec is optional. only for postgres db. 
                  env:
                    - name: PGPASSWORD
                      valueFrom:
                        secretKeyRef:
                            name: pgpassword
                            key: PGPASSWORD